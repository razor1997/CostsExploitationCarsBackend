using API.DTOs;
using API.Entities;
using API.Interfaces;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace API.Controllers
{
    //[Authorize]
    [ApiController]
    public class UserCarsController : BaseApiController
    {

        private IUserCarRepository _userCarRepository;
        private IMapper _mapper;
        public UserCarsController(IUserCarRepository userCarRepository, IMapper mapper)
        {
            _userCarRepository = userCarRepository;
            _mapper = mapper;
        }
        [HttpGet]
        public async Task<ActionResult<IEnumerable<UserCarDto>>> GetAllCars()
        {
            var allCars = await _userCarRepository.GetAllCarsAsync();
            return Ok(allCars);
        }
        [HttpGet("Id")]
        public async Task<ActionResult<Car>> GetUserCar(int idCar)
        {
            return await _userCarRepository.GetUserCarAsync(idCar);
        }
        [HttpGet("Mark")]
        public async Task<ActionResult<IEnumerable<UserCarDto>>> GetCarsByMark(string markCar)
        {
            var cars = await _userCarRepository.GetAllCarsByMarkAsync(markCar);
            return Ok(cars);
        }
        [HttpPut]
        public async Task<ActionResult<UserCarDto>> AddCarToDatabase(UserCarDto userCarDto)
        {
            var car = await _userCarRepository.GetUserCarAsync(userCarDto.Id);
            _mapper.Map(userCarDto, car);
            await _userCarRepository.AddCar(car);

            if (await _userCarRepository.SaveAllAsync()) return NoContent();

            return BadRequest("Failed");
        }
        [HttpDelete("Id")]
        public async Task<ActionResult<UserCarDto>> Delete(int id)
        {
            try
            {
                var car = _userCarRepository.GetUserCarAsync(id);
                if(car == null)
                {
                    return NotFound("Car not exist");
                }
                return await _userCarRepository.DeleteCar(id);
            }
            catch
            {
                return BadRequest("Failed");
            }
        }
        [HttpDelete("AppUserId")]
        public async Task<ActionResult<IEnumerable<UserCarDto>>> DeleteUserCars(int idUser)
        {
            try
            {
                var cars = await _userCarRepository.DeleteUserCars(idUser);
                if(cars == null)
                {
                    return NotFound("User don't have cars");
                }
                return null;
            }
            catch
            {
                return BadRequest("Failed");
            }
        }
    }
}
