using API.Entities;
using API.Interfaces;
using API.DTOs;
using AutoMapper;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace API.Controllers
{
    [ApiController]
    public class UserCarsRepairController : BaseApiController
    {

        private IUserCarRepairRepository _userCarRepairRepository;
        private IMapper _mapper;
        public UserCarsRepairController(IUserCarRepairRepository carRepairRepository, IMapper mapper)
        {
            _userCarRepairRepository = carRepairRepository;
            _mapper = mapper;
        }
        [HttpPut]
        public async Task<ActionResult> Update(UserCarRepairDto repair)
        {
            CarRepair carRepair = new CarRepair();
            _mapper.Map(repair, carRepair);
            _userCarRepairRepository.Update(carRepair);

            if (await _userCarRepairRepository.SaveAllAsync()) return NoContent();
            return BadRequest("Failed to update");

        }
        [HttpGet("carId")]
        public async Task<ActionResult<IEnumerable<UserCarRepairDto>>> GetAllCarRepairs(int IdCar)
        {
            var carRepairs = await _userCarRepairRepository.GetAllCarRepairs(IdCar);
            return Ok(carRepairs);
        }
        [HttpPost]
        public async Task<ActionResult<CarRepair>> Add(UserCarRepairDto repairDto)
        {
            CarRepair repair = new CarRepair();
            _mapper.Map(repairDto, repair);
            await _userCarRepairRepository.Add(repair);

            if (await _userCarRepairRepository.SaveAllAsync()) return NoContent();
            return BadRequest("Failed");
        }
        [HttpDelete("Id")]
        public async Task<ActionResult<UserCarRepairDto>> Delete(int Id)
        {
            try
            {
                var repair = await _userCarRepairRepository.Delete(Id);
                if(repair == null)
                {
                    return NotFound("Repair doesn't exist");
                }
                return null;
            }
            catch
            {
                return BadRequest("Failed");
            }
        }
    }
}
