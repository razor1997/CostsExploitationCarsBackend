using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using API.DTOs;
using API.Entities;
using API.Interfaces;
using AutoMapper;
using AutoMapper.QueryableExtensions;
using Microsoft.EntityFrameworkCore;

namespace API.Data
{
    public class UserCarRepository : IUserCarRepository
    {
        private DataContext _context;
        private Mapper _mapper;
        public UserCarRepository(DataContext context, Mapper mapper)
        {
            _mapper = mapper;
            _context = context;
        }
        public void Update(Car car)
        {
            _context.Entry(car).State = EntityState.Modified;
        }
        public async Task<bool> SaveAllAsync()
        {
            return await _context.SaveChangesAsync() > 0;
        }
        public async Task<IEnumerable<UserCarDto>> GetUserCarsAsync(int idUser)
        {
            return await _context.Cars.Where(x => x.AppUserId == idUser)
                .ProjectTo<UserCarDto>(_mapper.ConfigurationProvider)
                .ToListAsync();
        }

        public async Task<IEnumerable<UserCarDto>> GetAllCarsAsync()
        {
            return await _context.Cars
                .ProjectTo<UserCarDto>(_mapper.ConfigurationProvider)
                .ToListAsync();
        }

        public async Task<Car> GetUserCarAsync(int Id)
        {
            return await _context.Cars.FindAsync(Id);
        }
    }
}
