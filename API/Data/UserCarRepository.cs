using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using API.DTOs;
using API.Entities;
using API.Interfaces;
using AutoMapper;
using AutoMapper.QueryableExtensions;
using Microsoft.EntityFrameworkCore;

namespace API.Data
{
    public class UserCarRepository : IUserCarRepository
    {
        private DataContext _context;
        private IMapper _mapper;
        public UserCarRepository(DataContext context, IMapper mapper)
        {
            _mapper = mapper;
            _context = context;
        }
        public void Update(Car car)
        {
            _context.Entry(car).State = EntityState.Modified;
        }
        public async Task<bool> SaveAllAsync()
        {
            return await _context.SaveChangesAsync() > 0;
        }
        public async Task<IEnumerable<UserCarDto>> GetUserCarsAsync(int idUser)
        {
            return await _context.Cars.Where(x => x.AppUserId == idUser)
                .ProjectTo<UserCarDto>(_mapper.ConfigurationProvider)
                .ToListAsync();
        }

        public async Task<IEnumerable<UserCarDto>> GetAllCarsAsync()
        {
            return await _context.Cars
                .ProjectTo<UserCarDto>(_mapper.ConfigurationProvider)
                .ToListAsync();
        }
        public async Task<Car> GetUserCarAsync(int Id)
        {
            return await _context.Cars.FindAsync(Id);
        }
        public async Task<IEnumerable<UserCarDto>> GetAllCarsByMarkAsync(string markCar)
        {
            return await _context.Cars.Where(car => car.Mark == markCar)
                .ProjectTo<UserCarDto>(_mapper.ConfigurationProvider)
                .ToListAsync();
        }
        public async Task<Car> AddCar(Car car)
        {
            var result = await _context.Cars.AddAsync(car);
            return result.Entity;
        }
        public async Task<UserCarDto> DeleteCar(int IdCar)
        {
            Car car = await _context.Cars
                .FirstOrDefaultAsync(car => car.Id == IdCar);
            if(car != null)
            {
                _context.Cars.Remove(car);
                await _context.SaveChangesAsync();
                //return car;
            }
            return null;
        }

        public async Task<IEnumerable<UserCarDto>> DeleteUserCars(int idUser)
        {
            var cars = _context.Cars.Where(car => car.AppUserId == idUser)
                .ProjectTo<UserCarDto>(_mapper.ConfigurationProvider)
                .ToListAsync();
            if(cars != null)
            {
                _context.Remove(cars);
                await _context.SaveChangesAsync();
            }
            return null;
        }
    }
}
